//codeC
//payWithPaystackWebhook with web socket commit 703a2a8 ==========================:
const crypto = require("crypto");
  const webhook = async (req, res) => {
    try {
      const hash = crypto
        .createHmac("sha512", process.env.PAYSTACK_TEST_SECRET_KEY)
        
        .update(JSON.stringify(req.body)) // Stringify the object to create a hash
        .digest("hex");
  
      // Log the calculated hash and the received signature
      console.log("Calculated Hash:", hash);
      console.log("Received Signature:", req.headers["x-paystack-signature"]);
      if (hash === req.headers["x-paystack-signature"]) {
        // Retrieve the request's body:
        const event = req.body; // req.body is now a JavaScript object
        console.log("Received Paystack Webhook Event:", event);
        // Do something with the event:
        if (event && event.event === "charge.success") {
          console.log("Emitting transactionSuccess event:", event.data);
          try {
            const order = await Orders.findOne({}).sort({ createdAt: -1 });
            if (!order) {
              return res.status(404).json({ msg: "Order not found" });
            }
            order.paystackWebhook = event.data;
            await order.save();
            // Emit the event to all connected clients
            req.app
              .get("webhookNamespace")
              .emit("transactionSuccess", event.data, (error) => {
                if (error) {
                  console.error(
                    "Error emitting transactionSuccess event:",
                    error
                  );
                } else {
                  console.log("transactionSuccess event emitted successfully");
                }
              });
            // Handle charge success event
            console.log("Charge successful:", event.data);
            return res.status(200).json({ msg: "Charge successful" });
          } catch (databaseError) {
            console.error("Error updating order in the database:", databaseError);
            return res
              .status(500)
              .json({ msg: "Error updating order in the database" });
          }
        } else {
          // Invalid event type or other conditions
          console.error("Invalid Paystack event or conditions");
          return res
            .status(400)
            .json({ msg: "Invalid Paystack event or conditions" });
        }
      } else {
        // Signatures do not match
        console.error("Signatures do not match");
        return res.status(400).json({ msg: "Signatures do not match" });
      }
    } catch (error) {
      // An error occurred during the processing of the webhook
      console.error("Error processing webhook:", error);
      return res
        .status(500)
        .json({ msg: "An error occurred while processing the webhook" });
    }
  };

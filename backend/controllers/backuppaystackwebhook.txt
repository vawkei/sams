//codeC
//payWithPaystackWebhook with web socket commit 703a2a8 ==========================:
const crypto = require("crypto");
  const webhook = async (req, res) => {
    try {
      const hash = crypto
        .createHmac("sha512", process.env.PAYSTACK_TEST_SECRET_KEY)
        
        .update(JSON.stringify(req.body)) // Stringify the object to create a hash
        .digest("hex");
  
      // Log the calculated hash and the received signature
      console.log("Calculated Hash:", hash);
      console.log("Received Signature:", req.headers["x-paystack-signature"]);
      if (hash === req.headers["x-paystack-signature"]) {
        // Retrieve the request's body:
        const event = req.body; // req.body is now a JavaScript object
        console.log("Received Paystack Webhook Event:", event);
        // Do something with the event:
        if (event && event.event === "charge.success") {
          console.log("Emitting transactionSuccess event:", event.data);
          try {
            const order = await Orders.findOne({}).sort({ createdAt: -1 });
            if (!order) {
              return res.status(404).json({ msg: "Order not found" });
            }
            order.paystackWebhook = event.data;
            await order.save();
            // Emit the event to all connected clients
            req.app
              .get("webhookNamespace")
              .emit("transactionSuccess", event.data, (error) => {
                if (error) {
                  console.error(
                    "Error emitting transactionSuccess event:",
                    error
                  );
                } else {
                  console.log("transactionSuccess event emitted successfully");
                }
              });
            // Handle charge success event
            console.log("Charge successful:", event.data);
            return res.status(200).json({ msg: "Charge successful" });
          } catch (databaseError) {
            console.error("Error updating order in the database:", databaseError);
            return res
              .status(500)
              .json({ msg: "Error updating order in the database" });
          }
        } else {
          // Invalid event type or other conditions
          console.error("Invalid Paystack event or conditions");
          return res
            .status(400)
            .json({ msg: "Invalid Paystack event or conditions" });
        }
      } else {
        // Signatures do not match
        console.error("Signatures do not match");
        return res.status(400).json({ msg: "Signatures do not match" });
      }
    } catch (error) {
      // An error occurred during the processing of the webhook
      console.error("Error processing webhook:", error);
      return res
        .status(500)
        .json({ msg: "An error occurred while processing the webhook" });
    }
  };



















|TESTED THIS ON SATURDAY 24/2/24 AND IT WORKED
//goingtestagain 1 parent bdfe4dd commit 526d46f
|const crypto = require("crypto");
|const webhook = async (req, res) => {
|  try {
    const hash = crypto
      //.createHmac("sha512", process.env.PAYSTACK_LIVE_SECRET_KEY)
      .createHmac("sha512", process.env.PAYSTACK_TEST_SECRET_KEY)
      .update(JSON.stringify(req.body)) // Stringify the object to create a hash
      .digest("hex");

    // Log the calculated hash and the received signature
    console.log("Calculated Hash:", hash);
    console.log("Received Signature:", req.headers["x-paystack-signature"]);
    if (hash === req.headers["x-paystack-signature"]) {
      // Retrieve the request's body:
      const event = req.body; // req.body is now a JavaScript object
      console.log("Received Paystack Webhook Event:", event);
      // Do something with the event:
      if (event && event.event === "charge.success") {
        console.log("Emitting transactionSuccess event:", event.data);
        try {
          const order = await Orders.findOne({}).sort({ createdAt: -1 });
          if (!order) {
            return res.status(404).json({ msg: "Order not found" });
          }
          order.paystackWebhook = event.data;
          await order.save();
          // Emit the event to all connected clients
          req.app
            .get("webhookNamespace")
            .emit("transactionSuccess", event.data, (error) => {
              if (error) {
                console.error(
                  "Error emitting transactionSuccess event:",
                  error
                );
              } else {
                console.log("transactionSuccess event emitted successfully");
              }
            });
          // Handle charge success event
          console.log("Charge successful:", event.data);
          return res.status(200).json({ msg: "Charge successful" });
        } catch (databaseError) {
          console.error("Error updating order in the database:", databaseError);
          return res
            .status(500)
            .json({ msg: "Error updating order in the database" });
        }
      } else {
        // Invalid event type or other conditions
        console.error("Invalid Paystack event or conditions");
        return res
          .status(400)
          .json({ msg: "Invalid Paystack event or conditions" });
      }
    } else {
      // Signatures do not match
      console.error("Signatures do not match");
      return res.status(400).json({ msg: "Signatures do not match" });
    }
  } catch (error) {
    // An error occurred during the processing of the webhook
    console.error("Error processing webhook:", error);
    return res
      .status(500)
      .json({ msg: "An error occurred while processing the webhook" });
  }
};


THIS WAS HOW THE VERIFYPAYMENT.JS LOOKED WITH THE WEBHOOK OF ON SATURDAY 24/2/24:
import classes from "./VerifyPayment.module.css";
import { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate, useLocation } from "react-router-dom";
import { cartSliceActions } from "../../store/cart/cartIndex";
import { verifypayment } from "../../store/paystack/paystackIndex";
import { createOrder } from "../../store/order/orderIndex";
// import {toast} from "react-toastify"
//import Button from "../ui/button/Button";
function useQuery() {
  return new URLSearchParams(useLocation().search);
}
const VerifyPayment = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { incomingOrder } = useSelector((state) => state.form);
  console.log(incomingOrder);
  const query = useQuery();
  // const navigateToOrdersHandler = () => {
  //   navigate("/order-history");
  // };
  const submitHandler = async () => {
    const reference = query.get("reference");
    try {
      if (reference) {
        await dispatch(verifypayment({ reference }));
        await dispatch(createOrder(incomingOrder));

        localStorage.setItem("cartItems", JSON.stringify([]));
        dispatch(cartSliceActions.RESET_CART());
        

        const clearer = setTimeout(()=>{
          navigate("/checkout");
        },8000)
        return ()=>clearTimeout(clearer)

      } else {
        console.log("No reference found");
        throw new Error("No reference found");
      }
    } catch (error) {
      console.log("Error:", error);
    }
  };
  useEffect(() => {
    submitHandler();
  }, []);
  return (
    <div className={classes["verification"]}>
      <h2>Payment Verified</h2>
      {/* <Button onClick={navigateToOrdersHandler} className={classes.btn}>
        View Orders
      </Button> */}
    </div>
  );
};
export default VerifyPayment;












































































//codeD:
//payWithPaystackWebhook with web socket handling charge.success and refunds======:
// const crypto = require("crypto");
// const webhook = async (req, res) => {
//   try {
//     const hash = crypto
//       .createHmac("sha512", process.env.PAYSTACK_TEST_SECRET_KEY)
//       .update(JSON.stringify(req.body))
//       .digest("hex");

//     console.log("Calculated Hash:", hash);
//     console.log("Received Signature:", req.headers["x-paystack-signature"]);

//     if (hash === req.headers["x-paystack-signature"]) {
//       const event = req.body;
//       console.log("Received Paystack Webhook Event:", event);

//       if (event && event.event === "charge.success") {
//         console.log("Emitting transactionSuccess event:", event.data);

//         try {
//           const order = await Orders.findOne({}).sort({ createdAt: -1 });
//           if (!order) {
//             return res.status(404).json({ msg: "Order not found" });
//           }
//           if (order.paymentMethod === "Pay on Delivery") {
//             return;
//           }
//           order.paystackWebhook = event.data;
//           await order.save();
//           console.log("paystackWebhook saved to database");

//           req.app.get("webhookNamespace").emit("transactionSuccess", event.data, (error) => {
//             if (error) {
//               console.error("Error emitting transactionSuccess event:", error);
//             } else {
//               console.log("transactionSuccess event emitted successfully");
//             }
//           });

//           console.log("Charge successful:", event.data);
//           return res.status(200).json({ msg: "Charge successful" });
//         } catch (databaseError) {
//           console.error("Error updating order in the database:", databaseError);
//           return res.status(500).json({ msg: "Error updating order in the database" });
//         }
//       } else if (event && event.event === "refund.processed") {
//         // Handle refund processed event
//         console.log("Refund processed:", event.data);
//         return res.status(400).json({ msg: 'Error handling refund processed event' });
//       } else if (event && event.event === "refund.pending") {
//         // Handle refund pending event
//         console.log("Refund pending:", event.data);
//         return res.status(400).json({ msg: 'Error handling refund pending event' });
//       } else {
//         console.error("Unexpected Paystack event type:", event.event);
//         return res.status(400).json({ msg: 'Unexpected Paystack event type' });
//       }
//     } else {
//       console.error("Signatures do not match");
//       return res.status(400).json({ msg: "Signatures do not match" });
//     }
//   } catch (error) {
//     console.error("Error processing webhook:", error);
//     return res.status(500).json({ msg: "An error occurred while processing the webhook" });
//   }
// };
